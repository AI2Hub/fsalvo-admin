// Code generated by https://github.com/feihua/code_cli
// author：刘飞华
// date：2025/01/08 13:51:14

use crate::common::error::AppResult;
use crate::common::result::BaseResponse;
use crate::model::system::sys_dict_data_model::{count_dict_data_by_type, update_dict_data_type};
use crate::model::system::sys_dict_type_model::DictType;
use crate::utils::time_util::time_to_string;
use crate::vo::system::sys_dict_type_vo::*;
use crate::RB;
use rbatis::plugin::page::PageRequest;
use rbs::{value};
use salvo::prelude::*;
use salvo::{Request, Response};

/*
 *添加字典类型表
 *author：刘飞华
 *date：2025/01/08 13:51:14
 */
#[handler]
pub async fn add_sys_dict_type(req: &mut Request, res: &mut Response) -> AppResult<()> {
    let item = req.parse_json::<AddDictTypeReq>().await?;
    log::info!("add sys_dict_type params: {:?}", &item);

    let rb = &mut RB.clone();
    if DictType::select_by_dict_type(rb, &item.dict_type)
        .await?
        .is_some()
    {
        return BaseResponse::<String>::err_result_msg(res, "新增字典失败,字典类型已存在");
    }

    let sys_dict_type = DictType {
        dict_id: None,                           //字典主键
        dict_name: item.dict_name,               //字典名称
        dict_type: item.dict_type,               //字典类型
        status: item.status,                     //状态（0：停用，1:正常）
        remark: item.remark.unwrap_or_default(), //备注
        create_time: None,                       //创建时间
        update_time: None,                       //修改时间
    };

    DictType::insert(rb, &sys_dict_type).await?;
    BaseResponse::<String>::ok_result(res)
}

/*
 *删除字典类型表
 *author：刘飞华
 *date：2025/01/08 13:51:14
 */
#[handler]
pub async fn delete_sys_dict_type(req: &mut Request, res: &mut Response) -> AppResult<()> {
    let item = req.parse_json::<DeleteDictTypeReq>().await?;
    log::info!("delete sys_dict_type params: {:?}", &item);

    let rb = &mut RB.clone();
    let ids = item.ids.clone();
    for id in ids {
        let p = match DictType::select_by_id(rb, &id).await? {
            None => return BaseResponse::<String>::err_result_msg(res, "字典类型不存在,不能删除"),
            Some(x) => x,
        };

        let res_count = count_dict_data_by_type(rb, &p.dict_type).await?;
        if res_count > 0 {
            let msg = format!("{}已分配,不能删除", p.dict_name);
            return BaseResponse::<String>::err_result_msg(res, msg.as_str());
        }
    }

    DictType::delete_by_map(rb, value! {"id": &item.ids}).await?;
    BaseResponse::<String>::ok_result(res)
}

/*
 *更新字典类型表
 *author：刘飞华
 *date：2025/01/08 13:51:14
 */
#[handler]
pub async fn update_sys_dict_type(req: &mut Request, res: &mut Response) -> AppResult<()> {
    let item = req.parse_json::<UpdateDictTypeReq>().await?;
    log::info!("update sys_dict_type params: {:?}", &item);

    let rb = &mut RB.clone();
    if DictType::select_by_id(rb, &item.dict_id).await?.is_none() {
        return BaseResponse::<String>::err_result_msg(res, "更新字典失败,字典类型不存在");
    }

    if let Some(x) = DictType::select_by_dict_type(rb, &item.dict_type).await? {
        if x.dict_id.unwrap_or_default() != item.dict_id {
            return BaseResponse::<String>::err_result_msg(res, "更新字典失败,字典类型已存在");
        }

        let dict_type = x.dict_type;
        update_dict_data_type(rb, &*item.dict_type, &dict_type).await?;
    }

    let sys_dict_type = DictType {
        dict_id: Some(item.dict_id),             //字典主键
        dict_name: item.dict_name,               //字典名称
        dict_type: item.dict_type,               //字典类型
        status: item.status,                     //状态（0：停用，1:正常）
        remark: item.remark.unwrap_or_default(), //备注
        create_time: None,                       //创建时间
        update_time: None,                       //修改时间
    };

    DictType::update_by_map(rb, &sys_dict_type, value! {"dict_id": &sys_dict_type.dict_id}).await?;
    BaseResponse::<String>::ok_result(res)
}

/*
 *更新字典类型表状态
 *author：刘飞华
 *date：2025/01/08 13:51:14
 */
#[handler]
pub async fn update_sys_dict_type_status(req: &mut Request, res: &mut Response) -> AppResult<()> {
    let item = req.parse_json::<UpdateDictTypeStatusReq>().await?;

    let rb = &mut RB.clone();
    log::info!("update sys_dict_type_status params: {:?}", &item);

    let update_sql = format!(
        "update sys_dict_type set status = ? where dict_id in ({})",
        item.ids
            .iter()
            .map(|_| "?")
            .collect::<Vec<&str>>()
            .join(", ")
    );

    let mut param = vec![value!(item.status)];
    param.extend(item.ids.iter().map(|&id| value!(id)));

    rb.exec(&update_sql, param).await?;
    BaseResponse::<String>::ok_result(res)
}

/*
 *查询字典类型表详情
 *author：刘飞华
 *date：2025/01/08 13:51:14
 */
#[handler]
pub async fn query_sys_dict_type_detail(req: &mut Request, res: &mut Response) -> AppResult<()> {
    let item = req.parse_json::<QueryDictTypeDetailReq>().await?;

    log::info!("query sys_dict_type_detail params: {:?}", &item);

    match DictType::select_by_id(&mut RB.clone(), &item.id).await? {
        None => BaseResponse::<QueryDictTypeDetailResp>::err_result_data(
            res,
            QueryDictTypeDetailResp::new(),
            "字典类型不存在",
        ),
        Some(x) => {
            let sys_dict_type = QueryDictTypeDetailResp {
                dict_id: x.dict_id.unwrap_or_default(),     //字典主键
                dict_name: x.dict_name,                     //字典名称
                dict_type: x.dict_type,                     //字典类型
                status: x.status,                           //状态（0：停用，1:正常）
                remark: x.remark,                           //备注
                create_time: time_to_string(x.create_time), //创建时间
                update_time: time_to_string(x.update_time), //修改时间
            };

            BaseResponse::<QueryDictTypeDetailResp>::ok_result_data(res, sys_dict_type)
        }
    }
}

/*
 *查询字典类型表列表
 *author：刘飞华
 *date：2025/01/08 13:51:14
 */
#[handler]
pub async fn query_sys_dict_type_list(req: &mut Request, res: &mut Response) -> AppResult<()> {
    let item = req.parse_json::<QueryDictTypeListReq>().await?;
    log::info!("query sys_dict_type_list params: {:?}", &item);

    let page = &PageRequest::new(item.page_no, item.page_size);

    let mut list: Vec<DictTypeListDataResp> = Vec::new();
    let d = DictType::select_dict_type_list(&mut RB.clone(), page, &item).await?;

    let total = d.total;

    for x in d.records {
        list.push(DictTypeListDataResp {
            dict_id: x.dict_id.unwrap_or_default(),     //字典主键
            dict_name: x.dict_name,                     //字典名称
            dict_type: x.dict_type,                     //字典类型
            status: x.status,                           //状态（0：停用，1:正常）
            remark: x.remark,                           //备注
            create_time: time_to_string(x.create_time), //创建时间
            update_time: time_to_string(x.update_time), //修改时间
        })
    }

    BaseResponse::<Vec<DictTypeListDataResp>>::ok_result_page(res, list, total)
}
