// Code generated by https://github.com/feihua/code_cli
// author：刘飞华
// date：2025/01/08 13:51:14

use rbatis::plugin::page::PageRequest;
use rbs::to_value;
use salvo::prelude::*;
use salvo::{Request, Response};

use crate::common::result::BaseResponse;
use crate::model::system::sys_dict_data_model::{count_dict_data_by_type, update_dict_data_type};
use crate::model::system::sys_dict_type_model::DictType;
use crate::utils::time_util::time_to_string;
use crate::vo::system::sys_dict_type_vo::*;
use crate::RB;

/*
 *添加字典类型表
 *author：刘飞华
 *date：2025/01/08 13:51:14
 */
#[handler]
pub async fn add_sys_dict_type(req: &mut Request, res: &mut Response) {
    match req.parse_json::<AddDictTypeReq>().await {
        Ok(item) => {
            log::info!("add sys_dict_type params: {:?}", &item);

            let rb = &mut RB.clone();
            match DictType::select_by_dict_type(rb, &item.dict_type).await {
                Ok(None) => {}
                Ok(Some(_x)) => {
                    return BaseResponse::<String>::err_result_msg(
                        res,
                        "新增字典失败,字典类型已存在".to_string(),
                    )
                }
                Err(err) => return BaseResponse::<String>::err_result_msg(res, err.to_string()),
            }

            let sys_dict_type = DictType {
                dict_id: None,                           //字典主键
                dict_name: item.dict_name,               //字典名称
                dict_type: item.dict_type,               //字典类型
                status: item.status,                     //状态（0：停用，1:正常）
                remark: item.remark.unwrap_or_default(), //备注
                create_time: None,                       //创建时间
                update_time: None,                       //修改时间
            };

            match DictType::insert(rb, &sys_dict_type).await {
                Ok(_u) => BaseResponse::<String>::ok_result(res),
                Err(err) => BaseResponse::<String>::err_result_msg(res, err.to_string()),
            }
        }
        Err(err) => {
            BaseResponse::<String>::err_result_msg(res, format!("解析请求参数失败: {}", err))
        }
    }
}

/*
 *删除字典类型表
 *author：刘飞华
 *date：2025/01/08 13:51:14
 */
#[handler]
pub async fn delete_sys_dict_type(req: &mut Request, res: &mut Response) {
    match req.parse_json::<DeleteDictTypeReq>().await {
        Ok(item) => {
            log::info!("delete sys_dict_type params: {:?}", &item);

            let rb = &mut RB.clone();
            let ids = item.ids.clone();
            for id in ids {
                let p = match DictType::select_by_id(rb, &id).await {
                    Ok(None) => {
                        return BaseResponse::<String>::err_result_msg(
                            res,
                            "字典类型不存在,不能删除".to_string(),
                        )
                    }
                    Ok(Some(x)) => x,
                    Err(err) => {
                        return BaseResponse::<String>::err_result_msg(res, err.to_string())
                    }
                };

                let res_count = count_dict_data_by_type(rb, &p.dict_type)
                    .await
                    .unwrap_or_default();
                if res_count > 0 {
                    let msg = format!("{}已分配,不能删除", p.dict_name);
                    return BaseResponse::<String>::err_result_msg(res, msg);
                }
            }

            match DictType::delete_in_column(rb, "id", &item.ids).await {
                Ok(_u) => BaseResponse::<String>::ok_result(res),
                Err(err) => BaseResponse::<String>::err_result_msg(res, err.to_string()),
            }
        }
        Err(err) => {
            BaseResponse::<String>::err_result_msg(res, format!("解析请求参数失败: {}", err))
        }
    }
}

/*
 *更新字典类型表
 *author：刘飞华
 *date：2025/01/08 13:51:14
 */
#[handler]
pub async fn update_sys_dict_type(req: &mut Request, res: &mut Response) {
    match req.parse_json::<UpdateDictTypeReq>().await {
        Ok(item) => {
            log::info!("update sys_dict_type params: {:?}", &item);

            let rb = &mut RB.clone();
            let dict_by_id = DictType::select_by_id(rb, &item.dict_id).await;
            match dict_by_id {
                Ok(None) => {
                    return BaseResponse::<String>::err_result_msg(
                        res,
                        "更新字典失败,字典类型不存在".to_string(),
                    )
                }
                Ok(Some(x)) => x,
                Err(err) => return BaseResponse::<String>::err_result_msg(res, err.to_string()),
            };

            match DictType::select_by_dict_type(rb, &item.dict_type).await {
                Ok(None) => {}
                Ok(Some(x)) => {
                    if x.dict_id.unwrap_or_default() != item.dict_id {
                        return BaseResponse::<String>::err_result_msg(
                            res,
                            "更新字典失败,字典类型已存在".to_string(),
                        );
                    }

                    let dict_type = x.dict_type;
                    let _ = update_dict_data_type(rb, &*item.dict_type, &dict_type).await;
                }
                Err(err) => return BaseResponse::<String>::err_result_msg(res, err.to_string()),
            }

            let sys_dict_type = DictType {
                dict_id: Some(item.dict_id),             //字典主键
                dict_name: item.dict_name,               //字典名称
                dict_type: item.dict_type,               //字典类型
                status: item.status,                     //状态（0：停用，1:正常）
                remark: item.remark.unwrap_or_default(), //备注
                create_time: None,                       //创建时间
                update_time: None,                       //修改时间
            };

            match DictType::update_by_column(rb, &sys_dict_type, "dict_id").await {
                Ok(_u) => BaseResponse::<String>::ok_result(res),
                Err(err) => BaseResponse::<String>::err_result_msg(res, err.to_string()),
            }
        }
        Err(err) => {
            BaseResponse::<String>::err_result_msg(res, format!("解析请求参数失败: {}", err))
        }
    }
}

/*
 *更新字典类型表状态
 *author：刘飞华
 *date：2025/01/08 13:51:14
 */
#[handler]
pub async fn update_sys_dict_type_status(req: &mut Request, res: &mut Response) {
    let rb = &mut RB.clone();
    match req.parse_json::<UpdateDictTypeStatusReq>().await {
        Ok(item) => {
            log::info!("update sys_dict_type_status params: {:?}", &item);

            let update_sql = format!(
                "update sys_dict_type set status = ? where dict_id in ({})",
                item.ids
                    .iter()
                    .map(|_| "?")
                    .collect::<Vec<&str>>()
                    .join(", ")
            );

            let mut param = vec![to_value!(item.status)];
            param.extend(item.ids.iter().map(|&id| to_value!(id)));

            match rb.exec(&update_sql, param).await {
                Ok(_u) => BaseResponse::<String>::ok_result(res),
                Err(err) => BaseResponse::<String>::err_result_msg(res, err.to_string()),
            }
        }
        Err(err) => {
            BaseResponse::<String>::err_result_msg(res, format!("解析请求参数失败: {}", err))
        }
    }
}

/*
 *查询字典类型表详情
 *author：刘飞华
 *date：2025/01/08 13:51:14
 */
#[handler]
pub async fn query_sys_dict_type_detail(req: &mut Request, res: &mut Response) {
    match req.parse_json::<QueryDictTypeDetailReq>().await {
        Ok(item) => {
            log::info!("query sys_dict_type_detail params: {:?}", &item);

            let rb = &mut RB.clone();

            match DictType::select_by_id(rb, &item.id).await {
                Ok(None) => BaseResponse::<QueryDictTypeDetailResp>::err_result_data(
                    res,
                    QueryDictTypeDetailResp::new(),
                    "字典类型不存在".to_string(),
                ),
                Ok(Some(x)) => {
                    let sys_dict_type = QueryDictTypeDetailResp {
                        dict_id: x.dict_id.unwrap_or_default(),     //字典主键
                        dict_name: x.dict_name,                     //字典名称
                        dict_type: x.dict_type,                     //字典类型
                        status: x.status,                           //状态（0：停用，1:正常）
                        remark: x.remark,                           //备注
                        create_time: time_to_string(x.create_time), //创建时间
                        update_time: time_to_string(x.update_time), //修改时间
                    };

                    BaseResponse::<QueryDictTypeDetailResp>::ok_result_data(res, sys_dict_type)
                }
                Err(err) => BaseResponse::<QueryDictTypeDetailResp>::err_result_data(
                    res,
                    QueryDictTypeDetailResp::new(),
                    err.to_string(),
                ),
            }
        }
        Err(err) => {
            BaseResponse::<String>::err_result_msg(res, format!("解析请求参数失败: {}", err))
        }
    }
}

/*
 *查询字典类型表列表
 *author：刘飞华
 *date：2025/01/08 13:51:14
 */
#[handler]
pub async fn query_sys_dict_type_list(req: &mut Request, res: &mut Response) {
    match req.parse_json::<QueryDictTypeListReq>().await {
        Ok(item) => {
            log::info!("query sys_dict_type_list params: {:?}", &item);

            let dict_name = item.dict_name.as_deref().unwrap_or_default(); //字典名称
            let dict_type = item.dict_type.as_deref().unwrap_or_default(); //字典类型
            let status = item.status.unwrap_or(2); //状态（0：停用，1:正常）

            let page = &PageRequest::new(item.page_no, item.page_size);
            let rb = &mut RB.clone();

            let mut sys_dict_type_list_data: Vec<DictTypeListDataResp> = Vec::new();
            match DictType::select_dict_type_list(rb, page, dict_name, dict_type, status).await {
                Ok(d) => {
                    let total = d.total;

                    for x in d.records {
                        sys_dict_type_list_data.push(DictTypeListDataResp {
                            dict_id: x.dict_id.unwrap_or_default(),     //字典主键
                            dict_name: x.dict_name,                     //字典名称
                            dict_type: x.dict_type,                     //字典类型
                            status: x.status,                           //状态（0：停用，1:正常）
                            remark: x.remark,                           //备注
                            create_time: time_to_string(x.create_time), //创建时间
                            update_time: time_to_string(x.update_time), //修改时间
                        })
                    }

                    BaseResponse::<Vec<DictTypeListDataResp>>::ok_result_page(
                        res,
                        sys_dict_type_list_data,
                        total,
                    )
                }
                Err(err) => {
                    BaseResponse::<String>::err_result_msg(res, format!("数据库错误: {}", err))
                }
            }
        }
        Err(err) => {
            BaseResponse::<String>::err_result_msg(res, format!("解析请求参数失败: {}", err))
        }
    }
}
